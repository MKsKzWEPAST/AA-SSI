{
	"compiler": {
		"version": "0.8.20+commit.a1b79de6"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"name": "InvalidInitialization",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotInitializing",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "OwnableInvalidOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "OwnableUnauthorizedAccount",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint64",
						"name": "version",
						"type": "uint64"
					}
				],
				"name": "Initialized",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferStarted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"inputs": [],
				"name": "REQUESTS_RETURN_LIMIT",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "acceptOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "requestId",
						"type": "uint64"
					}
				],
				"name": "deny",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "requestId",
						"type": "uint64"
					}
				],
				"name": "getZKPRequest",
				"outputs": [
					{
						"components": [
							{
								"internalType": "string",
								"name": "metadata",
								"type": "string"
							},
							{
								"internalType": "contract ICircuitValidator",
								"name": "validator",
								"type": "address"
							},
							{
								"internalType": "bytes",
								"name": "data",
								"type": "bytes"
							}
						],
						"internalType": "struct IZKPVerifier.ZKPRequest",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "startIndex",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "length",
						"type": "uint256"
					}
				],
				"name": "getZKPRequests",
				"outputs": [
					{
						"components": [
							{
								"internalType": "string",
								"name": "metadata",
								"type": "string"
							},
							{
								"internalType": "contract ICircuitValidator",
								"name": "validator",
								"type": "address"
							},
							{
								"internalType": "bytes",
								"name": "data",
								"type": "bytes"
							}
						],
						"internalType": "struct IZKPVerifier.ZKPRequest[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getZKPRequestsCount",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"internalType": "uint64",
						"name": "requestID",
						"type": "uint64"
					}
				],
				"name": "isProofSubmitted",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "pendingOwner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "",
						"type": "uint64"
					}
				],
				"name": "pendingRequests",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "requestId",
						"type": "uint64"
					}
				],
				"name": "requestIdExists",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "requestId",
						"type": "uint64"
					},
					{
						"components": [
							{
								"internalType": "string",
								"name": "metadata",
								"type": "string"
							},
							{
								"internalType": "contract ICircuitValidator",
								"name": "validator",
								"type": "address"
							},
							{
								"internalType": "bytes",
								"name": "data",
								"type": "bytes"
							}
						],
						"internalType": "struct IZKPVerifier.ZKPRequest",
						"name": "request",
						"type": "tuple"
					}
				],
				"name": "setZKPRequest",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "smc",
				"outputs": [
					{
						"internalType": "contract SmartMoney",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint64",
						"name": "requestId",
						"type": "uint64"
					},
					{
						"internalType": "uint256[]",
						"name": "inputs",
						"type": "uint256[]"
					},
					{
						"internalType": "uint256[2]",
						"name": "a",
						"type": "uint256[2]"
					},
					{
						"internalType": "uint256[2][2]",
						"name": "b",
						"type": "uint256[2][2]"
					},
					{
						"internalType": "uint256[2]",
						"name": "c",
						"type": "uint256[2]"
					}
				],
				"name": "submitZKPResponse",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"errors": {
				"InvalidInitialization()": [
					{
						"details": "The contract is already initialized."
					}
				],
				"NotInitializing()": [
					{
						"details": "The contract is not initializing."
					}
				],
				"OwnableInvalidOwner(address)": [
					{
						"details": "The owner is not a valid owner account. (eg. `address(0)`)"
					}
				],
				"OwnableUnauthorizedAccount(address)": [
					{
						"details": "The caller account is not authorized to perform an operation."
					}
				]
			},
			"events": {
				"Initialized(uint64)": {
					"details": "Triggered when the contract has been initialized or reinitialized."
				}
			},
			"kind": "dev",
			"methods": {
				"acceptOwnership()": {
					"details": "The new owner accepts the ownership transfer."
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"pendingOwner()": {
					"details": "Returns the address of the pending owner."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"transferOwnership(address)": {
					"details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"verifier/ageVerifier.sol": "AgeVerifier"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@iden3/contracts/interfaces/ICircuitValidator.sol": {
			"keccak256": "0xbe98b7af19064e81fda682c7ac82dbbd931a7893ccf3a2aba47de79a00bb7d3e",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://a7f123ea3766e2fbd7133cab920df2020fae36c1f48ced3be2b00863542eb684",
				"dweb:/ipfs/QmdpWiYM6wnjj2jAjPrYr2gK7nmpRXUh8uDu4ChGWGyypv"
			]
		},
		"@iden3/contracts/interfaces/IZKPVerifier.sol": {
			"keccak256": "0x5db761e69a831627c50c5b3a167565905d20517322acd7c7ed1ebb919183691e",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://a767b73de61aef79517bb17fd377ac2e83d07ed6caaab044245086f0222430e0",
				"dweb:/ipfs/Qmekzi3N9REUjoKsYACEUwej9qN4SfX5R7DdkGvxHP8WRK"
			]
		},
		"@iden3/contracts/lib/ArrayUtils.sol": {
			"keccak256": "0x09a22a4b96ab2fc3043b9f9c74a1e878b8c1986c2811a9d09481a129e4a5a6fd",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://bf50f15ec6baf97b1f2ef19439756c41aae80acb67e0c273983eaf62a2f6f736",
				"dweb:/ipfs/QmNhjcKGeuMgjJo3oeZKqUQBukx9RbUwYSDLBPj5YUxmBC"
			]
		},
		"@iden3/contracts/lib/GenesisUtils.sol": {
			"keccak256": "0xeb76c5837450a2df7760f2ce1efdf8a803b43ae8c678bf32365f9f2a70dde73d",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://fbdcccc2daf4a5c4f6d99629db14fddc20ad717e84e216e8b7c41373624ede4a",
				"dweb:/ipfs/QmfAo681Sjbb9cyB1sAQ6M93QAU9sw5bpSHLcP82LyM9a5"
			]
		},
		"@iden3/contracts/lib/PrimitiveTypeUtils.sol": {
			"keccak256": "0xd8caabc62fe8d38bb06efa80af6a30560aaee7a88f226dd101df5d1d163d841e",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://62ba1f1329a2d5103db055a045a9e8c1b20137fb6affc40ce3a27755a5bc9488",
				"dweb:/ipfs/QmYN6s5dRo4TbzMEA1fByo88L78D5fN3Hop5LmGEY3NgBv"
			]
		},
		"@iden3/contracts/verifiers/ZKPVerifier.sol": {
			"keccak256": "0x34c6f060bd4ca06010ceaf34f140a54f7dde9257c4dc57883be658ad5d73f13b",
			"license": "MIT",
			"urls": [
				"bzz-raw://34301f9358b6ccabe834b71abf9a5c1152e03bab3a9d558912fca92e6833ec72",
				"dweb:/ipfs/QmbraTYH3tQ5GvjLK9FhZXadijFL9ReJAobsjPfdVWtK51"
			]
		},
		"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol": {
			"keccak256": "0xbca4a4f66d98028293dba695851d1b20d3e0ba2fff7453fb241f192fa3fc6b6f",
			"license": "MIT",
			"urls": [
				"bzz-raw://013b3cfd9d1e34dad409c3b9a340860e8651e61cda509de33599fb5102f62fe7",
				"dweb:/ipfs/QmTVjDKofM9Nst8w8LAA3HHgi1eCnGYBpFb7Nbat71e2xz"
			]
		},
		"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
			"keccak256": "0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a",
			"license": "MIT",
			"urls": [
				"bzz-raw://9706d43a0124053d9880f6e31a59f31bc0a6a3dc1acd66ce0a16e1111658c5f6",
				"dweb:/ipfs/QmUFmfowzkRwGtDu36cXV9SPTBHJ3n7dG9xQiK5B28jTf2"
			]
		},
		"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
			"keccak256": "0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b",
			"license": "MIT",
			"urls": [
				"bzz-raw://7a61054ae84cd6c4d04c0c4450ba1d6de41e27e0a2c4f1bcdf58f796b401c609",
				"dweb:/ipfs/QmUvtdp7X1mRVyC3CsHrtPbgoqWaXHp3S1ZR24tpAQYJWM"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
			"keccak256": "0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397",
			"license": "MIT",
			"urls": [
				"bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9",
				"dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV"
			]
		},
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
			"license": "MIT",
			"urls": [
				"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
				"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
			]
		},
		"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
			"keccak256": "0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7",
			"license": "MIT",
			"urls": [
				"bzz-raw://ea290300e0efc4d901244949dc4d877fd46e6c5e43dc2b26620e8efab3ab803f",
				"dweb:/ipfs/QmcLLJppxKeJWqHxE2CUkcfhuRTgHSn8J4kijcLa5MYhSt"
			]
		},
		"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
			"keccak256": "0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80",
			"license": "MIT",
			"urls": [
				"bzz-raw://c5703ccdeb7b1d685e375ed719117e9edf2ab4bc544f24f23b0d50ec82257229",
				"dweb:/ipfs/QmTdwkbQq7owpCiyuzE7eh5LrD2ddrBCZ5WHVsWPi1RrTS"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70",
			"license": "MIT",
			"urls": [
				"bzz-raw://0ea104e577e63faea3b69c415637e99e755dcbf64c5833d7140c35a714d6d90c",
				"dweb:/ipfs/Qmau6x4Ns9XdyynRCNNp3RhLqijJjFm7z5fyZazfYFGYdq"
			]
		},
		"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
			"keccak256": "0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2",
			"license": "MIT",
			"urls": [
				"bzz-raw://0ad7c8d4d08938c8dfc43d75a148863fb324b80cf53e0a36f7e5a4ac29008850",
				"dweb:/ipfs/QmcrhfPgVNf5mkdhQvy1pMv51TFokD3Y4Wa5WZhFqVh8UV"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"smart-money/smart-money.sol": {
			"keccak256": "0xed3b60d72ac94d0af5f7af6908c222c25a738a46bd23a7387a42f6d680d6a64c",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://a4833cae938b499a37425155c6f8e49be410dfacfac53373ecf7a37e4a0381d4",
				"dweb:/ipfs/QmZui3c5fnNhnp6SbyKucPaX69UdzJM3Vryfo3RouMLVn2"
			]
		},
		"solidity-bytes-utils/contracts/BytesLib.sol": {
			"keccak256": "0xa5b10f04797d5a10a9ba07855108b6bd695940e6a3d128927b2f74a0d359868a",
			"license": "Unlicense",
			"urls": [
				"bzz-raw://a38d7680aacbb18dae659876b396b73bcc8f759672213f8a0efc4129e2648535",
				"dweb:/ipfs/QmfKFnwpTEGAnbRnZxMuv3mRCG9S9WMjFhFL23bftBT2Jq"
			]
		},
		"verifier/ageVerifier.sol": {
			"keccak256": "0x4ffe4604db9621ec3a433c2156c5045911d660eac1efaf257be721242334fc9f",
			"urls": [
				"bzz-raw://c6d3f712bd4c7e6f456331dcff0b73ac70563928b7f57c0e7079e2c53cda1259",
				"dweb:/ipfs/QmcWF7KnCDNkzUyqz7TReRax4wWh5NVPtdsGDoMfwQQrJu"
			]
		}
	},
	"version": 1
}